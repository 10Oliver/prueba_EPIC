{"ast":null,"code":"import Swal from \"sweetalert2\";\nexport default {\n  name: \"SeleccionPalabra\",\n  data() {\n    return {\n      Visible: false,\n      Cambio: false,\n      Palabra: null\n    };\n  },\n  methods: {\n    async setData() {\n      //Se revisa que si se tomará del input que no esté vacío\n      if (this.Palabra == \"\") {\n        Swal.fire({\n          title: \"Error en palabra\",\n          icon: \"warning\",\n          text: \"No se permiten campos vacíos\"\n        });\n      } else if (this.Palabra.length < 2) {\n        Swal.fire({\n          title: \"Error en palabra\",\n          icon: \"warning\",\n          text: \"La palabra debe de tener al menos dos letras\"\n        });\n      } else {\n        //Si se escogió el aletorio se verifica que sea así\n        if (this.Palabra == null) {\n          //Opciones para la petición\n          const options = {\n            method: \"GET\",\n            headers: {\n              \"X-RapidAPI-Key\": \"34e918967bmshd7edbd958454188p1ca3e0jsn6e169ad264eb\",\n              \"X-RapidAPI-Host\": \"random-words-with-pronunciation.p.rapidapi.com\"\n            }\n          };\n          let Busqueda = \"\";\n          fetch(\"https://random-words-with-pronunciation.p.rapidapi.com/word/dutch\", options).then(request => request.json()).then(response => {\n            Busqueda = response[0].word.toLowerCase();\n            this.$emit(\"retornar\", Busqueda);\n          }).catch(err => console.error(err));\n        } else {\n          this.Palabra = this.Palabra.toLowerCase();\n          this.$emit(\"retornar\", this.Palabra);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAiBA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;MACA;QACAC;UACAC;UACAC;UACAC;QACA;MACA;QACAH;UACAC;UACAC;UACAC;QACA;MACA;QACA;QACA;UACA;UACA;YACAC;YACAC;cACA;cACA;YACA;UACA;UAEA;UACAC,oFACAC,gCACAA;YACAC;YACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","Visible","Cambio","Palabra","methods","Swal","title","icon","text","method","headers","fetch","then","Busqueda"],"sourceRoot":"src/components","sources":["Seleccion.vue"],"sourcesContent":["<template>\r\n    <div id=\"seleccion\">\r\n        <h3>Elige la opción para adivinar la palabra</h3>\r\n        <span >Para empezar a jugar, debes de definir la palabra que tratarás de encontrar, para ello decide la opción que\r\n            más prefieras</span>\r\n        <div class=\"opciones\">\r\n            <button v-on:click=\"Visible = !Visible\">Escribir la palabra</button>\r\n            <button v-on:click=\"setData\">¡Qué el destino decida!</button>\r\n        </div>\r\n        <div class=\"contenedorTeclado\" v-if=\"Visible\">\r\n            <input type=\"text\" v-model=\"Palabra\" />\r\n            <button v-on:click=\"setData\">¡Empezar!</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default {\r\n    name: \"SeleccionPalabra\",\r\n    data() {\r\n        return {\r\n            Visible: false,\r\n            Cambio: false,\r\n            Palabra: null,\r\n        };\r\n    },\r\n    methods: {\r\n        async setData() {\r\n            //Se revisa que si se tomará del input que no esté vacío\r\n            if (this.Palabra == \"\") {\r\n                Swal.fire({\r\n                    title: \"Error en palabra\",\r\n                    icon: \"warning\",\r\n                    text: \"No se permiten campos vacíos\",\r\n                });\r\n            } else if (this.Palabra.length < 2) { \r\n                Swal.fire({\r\n                    title: \"Error en palabra\",\r\n                    icon: \"warning\",\r\n                    text: \"La palabra debe de tener al menos dos letras\",\r\n                });\r\n            } else {\r\n                //Si se escogió el aletorio se verifica que sea así\r\n                if (this.Palabra == null) {\r\n                    //Opciones para la petición\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"X-RapidAPI-Key\": \"34e918967bmshd7edbd958454188p1ca3e0jsn6e169ad264eb\",\r\n                            \"X-RapidAPI-Host\": \"random-words-with-pronunciation.p.rapidapi.com\",\r\n                        },\r\n                    };\r\n\r\n                    let Busqueda = \"\";\r\n                    fetch(\"https://random-words-with-pronunciation.p.rapidapi.com/word/dutch\", options)\r\n                        .then((request) => request.json())\r\n                        .then((response) => {\r\n                            Busqueda = response[0].word.toLowerCase();\r\n                            this.$emit(\"retornar\", Busqueda);\r\n                        }).catch((err) => console.error(err))\r\n                } else {\r\n                    this.Palabra = this.Palabra.toLowerCase();\r\n                            this.$emit(\"retornar\", this.Palabra);\r\n                }\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.opciones {\r\n    width: 80%;\r\n    margin-left: 10%;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    margin-top: 30px;\r\n}\r\n\r\nbutton {\r\n    height: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0px 20px;\r\n    border-radius: 10px;\r\n}\r\n\r\nh3 {\r\n    font-size: 22pt;\r\n    margin: 10px;\r\n}\r\n\r\nspan {    \r\n    font-size: 18pt;\r\n    margin: 5px 0px;\r\n}\r\n\r\nbutton {\r\n    font-size: 16pt;\r\n}\r\n\r\n.contenedorTeclado {\r\n    height: auto;\r\n    margin-top: 35px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 100px;\r\n}\r\n\r\ninput {\r\n    background-color: white;\r\n    border: 2px solid black !important;\r\n    border-radius: 5px;\r\n    width: 30%;\r\n    height: 35px;\r\n    font-size: 16pt;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}