{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SeleccionPalabra from \"./components/Seleccion.vue\";\nimport Juego from \"./components/Juego.vue\";\nimport teclado from \"./components/Teclado.vue\";\nimport PalabraEscondida from \"./components/PalabraEscondida.vue\";\nimport anime from \"animejs/lib/anime.es.js\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      estado: true,\n      palabra: [],\n      intentos: 6,\n      eleccion: null,\n      longitudArreglo: null,\n      arregloLineas: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    };\n  },\n  components: {\n    SeleccionPalabra,\n    Juego,\n    teclado,\n    PalabraEscondida\n  },\n  methods: {\n    getData(palabraR) {\n      let palabraSecreta = palabraR.split(''),\n        arreglo = [];\n      //Se crea un arreglo con la longitud de la palabra\n      for (let index = 0; index < palabraR.split('').length; index++) {\n        arreglo.push('*');\n      }\n      /**\r\n       * this.palabra es un arreglo generar para guardar ambos valores\r\n       * la palabra en arreglo\r\n       * y la cantidad de valores a adivinar\r\n       */\n      this.palabra.push(palabraSecreta); //Se agrega la palabra en arreglo\n      this.palabra.push(arreglo); // Arreglo de cantid\n      this.estado = false; //Se cierra la eleción y se muestra el resto de componentes\n    },\n\n    getIntento(opcion) {\n      //Revisar si la letra elegida es correcta o no\n      this.eleccion = opcion; //Se carga la opción\n      this.$refs.escondida.revisar(opcion);\n    },\n    apagar: function () {\n      //Función para apagar las opciones de respuesta\n      this.$refs.teclado.apagar();\n    },\n    dibujo: function () {\n      //Si la letra es incorrecta se procede a repintar el dibujo\n      this.$refs.juego.fallido();\n    }\n  },\n  mounted() {\n    this.arregloLineas.forEach(element => {\n      anime({\n        targets: '.linea' + element,\n        translateY: 45 * element,\n        background: '#000',\n        width: '100%',\n        height: 1\n      });\n    });\n  }\n};","map":{"version":3,"mappings":";AAgBA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACA;QAAAC;MACA;MACA;QACAA;MACA;MACA;AACA;AACA;AACA;AACA;MACA;MACA;MACA;IACA;;IACAC;MAAA;MACA;MACA;IACA;IACAC;MAAA;MACA;IACA;IACAC;MAAA;MACA;IACA;EACA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MAEA;IACA;EACA;AACA","names":["name","data","estado","palabra","intentos","eleccion","longitudArreglo","arregloLineas","components","SeleccionPalabra","Juego","teclado","PalabraEscondida","methods","getData","arreglo","getIntento","apagar","dibujo","mounted","anime","targets","translateY","background","width","height"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\">\r\n        <div v-for=\"numero in arregloLineas\" :key=\"numero.id\" :class=\"'linea'+numero\"></div>\r\n             <div class=\"contenedor_juego\">\r\n                 <h1>Juego de ahorcado</h1>\r\n        <SeleccionPalabra ref=\"seleccion\" v-if=\"estado\" v-on:retornar=\"getData\" />\r\n        <Juego v-if=\"!estado\" ref=\"juego\" />\r\n         <PalabraEscondida ref=\"escondida\"  v-bind:palabra=\"palabra\" v-if=\"!estado\" v-on:cancelar=\"apagar\" v-on:fallar=\"dibujo\"/>\r\n        <teclado ref=\"teclado\" v-if=\"!estado\" v-on:evaluar=\"getIntento\"/>\r\n             </div>\r\n       \r\n       \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport SeleccionPalabra from \"./components/Seleccion.vue\";\r\nimport Juego from \"./components/Juego.vue\";\r\nimport teclado from \"./components/Teclado.vue\";\r\nimport PalabraEscondida from \"./components/PalabraEscondida.vue\"\r\nimport anime from \"animejs/lib/anime.es.js\";\r\n\r\nexport default {\r\n    name: \"App\",\r\n    data() {\r\n        return {\r\n            estado: true,\r\n            palabra: [],\r\n            intentos: 6,\r\n            eleccion: null,\r\n            longitudArreglo: null,\r\n            arregloLineas: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\r\n        };\r\n    },\r\n    components: {\r\n        SeleccionPalabra,\r\n        Juego,\r\n        teclado,\r\n        PalabraEscondida\r\n    },\r\n    methods: {\r\n        getData(palabraR) {\r\n            let palabraSecreta = palabraR.split(''), arreglo = [];\r\n            //Se crea un arreglo con la longitud de la palabra\r\n            for (let index = 0; index < palabraR.split('').length; index++) {\r\n                arreglo.push('*');\r\n            }\r\n            /**\r\n             * this.palabra es un arreglo generar para guardar ambos valores\r\n             * la palabra en arreglo\r\n             * y la cantidad de valores a adivinar\r\n             */\r\n            this.palabra.push(palabraSecreta);  //Se agrega la palabra en arreglo\r\n            this.palabra.push(arreglo); // Arreglo de cantid\r\n            this.estado = false; //Se cierra la eleción y se muestra el resto de componentes\r\n        },\r\n        getIntento(opcion) { //Revisar si la letra elegida es correcta o no\r\n            this.eleccion = opcion; //Se carga la opción\r\n            this.$refs.escondida.revisar(opcion);\r\n        },\r\n        apagar: function () { //Función para apagar las opciones de respuesta\r\n            this.$refs.teclado.apagar();\r\n        },\r\n        dibujo: function () { //Si la letra es incorrecta se procede a repintar el dibujo\r\n            this.$refs.juego.fallido();\r\n        }\r\n    },\r\n    mounted() { \r\n       this.arregloLineas.forEach(element => {\r\n           anime({\r\n               targets: '.linea' + element,\r\n               translateY: (45 * element), \r\n               background: '#000',\r\n               width: '100%',\r\n               height: 1,\r\n\r\n        })\r\n       });\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n    font-family: Avenir, Helvetica, Arial, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    text-align: center;\r\n    color: #2c3e50;\r\n    margin-top: 15px;\r\n    margin: 0px;\r\n}\r\n\r\nbody {\r\n    margin: 0px !important;\r\n\r\n}\r\n\r\n.contedor\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}