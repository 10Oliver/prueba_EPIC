{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Swal from \"sweetalert2\";\nexport default {\n  props: [\"palabra\"],\n  name: \"PalabraEscondida\",\n  data() {\n    return {\n      secreto: this.palabra[0],\n      ActualEleccion: null,\n      visibilidad: false,\n      arreglo: this.palabra[1],\n      posicion: [],\n      intentos: 6\n    };\n  },\n  methods: {\n    revisar(letra) {\n      //Se verifica si la letra seleccionada se encuentra dentro del arreglo\n      let temporal = this.secreto.indexOf(letra);\n      //variable para verificar que si se encontró una coinicidencia\n      let estado = false;\n      //Se van guardando\n      while (temporal != -1) {\n        estado = true;\n        this.posicion.push(temporal);\n        temporal = this.secreto.indexOf(letra, temporal + 1);\n      }\n      //Se cambian los asteriscos por la letra real si hubieron coincidencias\n      if (estado) {\n        this.posicion.forEach(element => {\n          this.arreglo[element] = this.secreto[element];\n        });\n        //Se revisa si ya se ha completado la palabra\n        if (this.arreglo.join(\"\") == this.secreto.join(\"\")) {\n          Swal.fire({\n            title: \"¡Felicidades!\",\n            text: \"¡Has completado la palabra!\",\n            allowOutsideClick: false\n          });\n        }\n      } else {\n        this.intentos--;\n        if (this.intentos <= 0) {\n          Swal.fire({\n            title: \"Lo siento\",\n            text: \"¡Has perdido!\",\n            allowOutsideClick: false\n          });\n          //Se muestra la palabra\n          for (let index = 0; index < this.secreto.length; index++) {\n            this.arreglo[index] = this.secreto[index];\n          }\n          //Se \n        } else {\n          Swal.fire({\n            title: \"Estás equivocado\",\n            text: \"Intentos restantes\" + this.intentos,\n            toast: true,\n            position: \"top-end\",\n            timer: 2000,\n            closeOnClickOutside: false,\n            showConfirmButton: false,\n            closeOnEsc: false\n          });\n        }\n      }\n      this.$forceUpdate();\n    }\n  }\n};","map":{"version":3,"mappings":";AASA;AAEA;EACAA;EACAC;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;QACAC;QACA;QACAC;MACA;MACA;MACA;QACA;UACA;QACA;QACA;QACA;UACAC;YACAC;YACAC;YACAC;UACA;QACA;MACA;QACA;QACA;UACAH;YACAC;YACAC;YACAC;UACA;UACA;UACA;YACA;UACA;UACA;QACA;UACAH;YACAC;YACAC;YACAE;YACAC;YACAC;YACAC;YACAC;YACAC;UACA;QACA;MACA;MACA;IACA;EACA;AACA","names":["props","name","data","secreto","ActualEleccion","visibilidad","arreglo","posicion","intentos","methods","revisar","estado","temporal","Swal","title","text","allowOutsideClick","toast","position","timer","closeOnClickOutside","showConfirmButton","closeOnEsc"],"sourceRoot":"src/components","sources":["PalabraEscondida.vue"],"sourcesContent":["<template>\r\n    <div class=\"ContenedorPalabraEscondida\">\r\n        <span v-for=\"caracter in arreglo\" :key=\"caracter.id\" forceUpdate>\r\n            <p>{{ caracter }}</p></span\r\n        >\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default {\r\n    props: [\"palabra\"],\r\n    name: \"PalabraEscondida\",\r\n    data() {\r\n        return {\r\n            secreto: this.palabra[0],\r\n            ActualEleccion: null,\r\n            visibilidad: false,\r\n            arreglo: this.palabra[1],\r\n            posicion: [],\r\n            intentos: 6,\r\n        };\r\n    },\r\n    methods: {\r\n        revisar(letra) {\r\n            //Se verifica si la letra seleccionada se encuentra dentro del arreglo\r\n            let temporal = this.secreto.indexOf(letra);\r\n            //variable para verificar que si se encontró una coinicidencia\r\n            let estado = false;\r\n            //Se van guardando\r\n            while (temporal != -1) {\r\n                estado = true;\r\n                this.posicion.push(temporal);\r\n                temporal = this.secreto.indexOf(letra, temporal + 1);\r\n            }\r\n            //Se cambian los asteriscos por la letra real si hubieron coincidencias\r\n            if (estado) {\r\n                this.posicion.forEach((element) => {\r\n                    this.arreglo[element] = this.secreto[element];\r\n                });\r\n                //Se revisa si ya se ha completado la palabra\r\n                if (this.arreglo.join(\"\") == this.secreto.join(\"\")) {\r\n                    Swal.fire({\r\n                        title: \"¡Felicidades!\",\r\n                        text: \"¡Has completado la palabra!\",\r\n                        allowOutsideClick: false,\r\n                    });\r\n                }\r\n            } else {\r\n                this.intentos--;\r\n                if (this.intentos <= 0) {\r\n                    Swal.fire({\r\n                        title: \"Lo siento\",\r\n                        text: \"¡Has perdido!\",\r\n                        allowOutsideClick: false,\r\n                    });\r\n                    //Se muestra la palabra\r\n                    for (let index = 0; index < this.secreto.length; index++) {\r\n                        this.arreglo[index] = this.secreto[index];\r\n                    }\r\n                    //Se \r\n                } else {\r\n                    Swal.fire({\r\n                        title: \"Estás equivocado\",\r\n                        text: \"Intentos restantes\" + this.intentos,\r\n                        toast: true,\r\n                        position: \"top-end\",\r\n                        timer: 2000,\r\n                        closeOnClickOutside: false,\r\n                        showConfirmButton: false,\r\n                        closeOnEsc: false,\r\n                    });\r\n                }\r\n            }\r\n            this.$forceUpdate();\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.ContenedorPalabraEscondida {\r\n    width: 100%;\r\n\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\nspan {\r\n    padding: 0px 10px;\r\n    margin: 20px 5px;\r\n    width: 20px;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-bottom: 2px solid black;\r\n}\r\n\r\np {\r\n    font-size: 20pt;\r\n    margin: 0px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}